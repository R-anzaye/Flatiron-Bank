{"ast":null,"code":"import React,{useState}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function AddTransactionForm(){// Initialization of the state component remembering it has to be rendered by importing it first\n// The statesare specifically for the 4 data inputs that we have\nconst[date,setDate]=useState(\"\");const[description,setDescription]=useState(\"\");const[category,setCategory]=useState(\"\");const[amount,setAmount]=useState(0);// the handle submit function that is rendered to our form\nfunction handleSubmit(e){// Prevents default refreshing of the form and loosing the data after data has been placed\ne.preventDefault();//What this does is that is removes the data placed in the input holders making it empty as it was initially\nsetAmount(\"\");setCategory(\"\");setDescription(\"\");setDate(\"\");// just like javascript jsx enables us to use fetch function to fetch data from db.json and display it as post\nfetch(\"http://localhost:8001/transactions\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({// This the data we are placing in the body that is date, description,category and amount\ndate,description,category,amount})}).then(response=>response.json()).then(data=>{console.log(data);});}// Whatever is added is the onsubmit callback function(handleSubmit ) and also the value of every input not forgetting onChange taht basically captures the users input.\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"ui segment\",children:/*#__PURE__*/_jsxs(\"form\",{className:\"ui form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"inline fields\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"date\",name:\"date\",value:date,onChange:e=>setDate(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"description\",placeholder:\"Description\",value:description,onChange:e=>setDescription(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"category\",placeholder:\"Category\",value:category,onChange:e=>setCategory(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",name:\"amount\",placeholder:\"Amount\",step:\"0.01\",value:amount,onChange:e=>setAmount(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{className:\"ui button\",type:\"submit\",children:\"Add Transaction\"})]})});}export default AddTransactionForm;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","AddTransactionForm","date","setDate","description","setDescription","category","setCategory","amount","setAmount","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","className","children","onSubmit","type","name","value","onChange","target","placeholder","step"],"sources":["/home/ryantrent/Development/code/phase-4/Flatiron-Bank/src/components/AddTransactionForm.js"],"sourcesContent":["import React, { useState } from \"react\"\n\nfunction AddTransactionForm() {\n  // Initialization of the state component remembering it has to be rendered by importing it first\n // The statesare specifically for the 4 data inputs that we have\n  const [date, setDate] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [category, setCategory] = useState(\"\")\n  const [amount, setAmount] = useState(0)\n\n  // the handle submit function that is rendered to our form\n  function handleSubmit(e) {\n    // Prevents default refreshing of the form and loosing the data after data has been placed\n    e.preventDefault()\n    //What this does is that is removes the data placed in the input holders making it empty as it was initially\n    setAmount(\"\")\n    setCategory(\"\")\n    setDescription(\"\")\n    setDate(\"\")\n\n// just like javascript jsx enables us to use fetch function to fetch data from db.json and display it as post\n    fetch(\"http://localhost:8001/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        // This the data we are placing in the body that is date, description,category and amount\n        date,\n        description,\n        category,\n        amount,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data)\n      })\n  }\n// Whatever is added is the onsubmit callback function(handleSubmit ) and also the value of every input not forgetting onChange taht basically captures the users input.\n  return (\n    <div className=\"ui segment\">\n      <form className=\"ui form\" onSubmit={handleSubmit}>\n        <div className=\"inline fields\">\n          <input\n            type=\"date\"\n            name=\"date\"\n            value={date}\n            onChange={(e) => setDate(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            name=\"category\"\n            placeholder=\"Category\"\n            value={category}\n            onChange={(e) => setCategory(e.target.value)}\n          />\n          <input\n            type=\"number\"\n            name=\"amount\"\n            placeholder=\"Amount\"\n            step=\"0.01\"\n            value={amount}\n            onChange={(e) => setAmount(e.target.value)}\n          />\n        </div>\n        {/* This is the submit button that is rendered with the submit as type */}\n        <button className=\"ui button\" type=\"submit\">\n          Add Transaction\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddTransactionForm\n\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvC,QAAS,CAAAC,kBAAkBA,CAAA,CAAG,CAC5B;AACD;AACC,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAACQ,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACU,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACY,MAAM,CAAEC,SAAS,CAAC,CAAGb,QAAQ,CAAC,CAAC,CAAC,CAEvC;AACA,QAAS,CAAAc,YAAYA,CAACC,CAAC,CAAE,CACvB;AACAA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB;AACAH,SAAS,CAAC,EAAE,CAAC,CACbF,WAAW,CAAC,EAAE,CAAC,CACfF,cAAc,CAAC,EAAE,CAAC,CAClBF,OAAO,CAAC,EAAE,CAAC,CAEf;AACIU,KAAK,CAAC,oCAAoC,CAAE,CAC1CC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnB;AACAhB,IAAI,CACJE,WAAW,CACXE,QAAQ,CACRE,MACF,CAAC,CACH,CAAC,CAAC,CACCW,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,EAAK,CACdC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CACnB,CAAC,CAAC,CACN,CACF;AACE,mBACExB,IAAA,QAAK2B,SAAS,CAAC,YAAY,CAAAC,QAAA,cACzB1B,KAAA,SAAMyB,SAAS,CAAC,SAAS,CAACE,QAAQ,CAAEjB,YAAa,CAAAgB,QAAA,eAC/C1B,KAAA,QAAKyB,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5B5B,IAAA,UACE8B,IAAI,CAAC,MAAM,CACXC,IAAI,CAAC,MAAM,CACXC,KAAK,CAAE5B,IAAK,CACZ6B,QAAQ,CAAGpB,CAAC,EAAKR,OAAO,CAACQ,CAAC,CAACqB,MAAM,CAACF,KAAK,CAAE,CAC1C,CAAC,cACFhC,IAAA,UACE8B,IAAI,CAAC,MAAM,CACXC,IAAI,CAAC,aAAa,CAClBI,WAAW,CAAC,aAAa,CACzBH,KAAK,CAAE1B,WAAY,CACnB2B,QAAQ,CAAGpB,CAAC,EAAKN,cAAc,CAACM,CAAC,CAACqB,MAAM,CAACF,KAAK,CAAE,CACjD,CAAC,cACFhC,IAAA,UACE8B,IAAI,CAAC,MAAM,CACXC,IAAI,CAAC,UAAU,CACfI,WAAW,CAAC,UAAU,CACtBH,KAAK,CAAExB,QAAS,CAChByB,QAAQ,CAAGpB,CAAC,EAAKJ,WAAW,CAACI,CAAC,CAACqB,MAAM,CAACF,KAAK,CAAE,CAC9C,CAAC,cACFhC,IAAA,UACE8B,IAAI,CAAC,QAAQ,CACbC,IAAI,CAAC,QAAQ,CACbI,WAAW,CAAC,QAAQ,CACpBC,IAAI,CAAC,MAAM,CACXJ,KAAK,CAAEtB,MAAO,CACduB,QAAQ,CAAGpB,CAAC,EAAKF,SAAS,CAACE,CAAC,CAACqB,MAAM,CAACF,KAAK,CAAE,CAC5C,CAAC,EACC,CAAC,cAENhC,IAAA,WAAQ2B,SAAS,CAAC,WAAW,CAACG,IAAI,CAAC,QAAQ,CAAAF,QAAA,CAAC,iBAE5C,CAAQ,CAAC,EACL,CAAC,CACJ,CAAC,CAEV,CAEA,cAAe,CAAAzB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module"}